
    ADD, both immediate (5 bits) and two registers with a destination register designated. This means your controller will need to examine bit 5 in the instruction to determine which it is.
    AND, same as ADD WRT: addressing
    BR, branch as in the book but with the following change: the PCOffset can only be 7 bits. The two other bits will be used for the extra condition codes, carry (C) and overflow (O). The instruction will be BRn, BRz, BRp, BRc, BRo.
    JMP, exactly the same as in the book.
    LD, LDR, and LEA, exactly as in the book.
    NOT, exactly as in the book.
    ST and STR, exactly as in the book.
    SUB, choose an opcode not used in this implementation (e.g. Reserved) to be the opcode for this instruction.
    HALT, choose another unused opcode (e.g. RTI) to be the opcode for this instruction. Halt will be used to notify the main loop to terminate. Example: case HALT: {stop_bit=1; break;}

Operation        |15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|

ADD              |0 |0 |0 |1 |  |  |  |  |  |  |0 |0 |0 |  |  |  |                                           
                             [   DR  ][  SR1   ]        [   SR2  ]


ADD              |0 |0 |0 |1 |  |  |  |  |  |  |1 |  |  |  |  |  |                                                                              
                             [   DR  ][  SR1   ]  [     IMM5     ]


AND              |0 |1 |0 |1 |  |  |  |  |  |  |0 |0 |0 |  |  |  |                                                                                                                                                                          
                             [   DR  ][  SR1   ]        [   SR2  ]                                                               


AND              |0 |1 |0 |1 |  |  |  |  |  |  |1 |  |  |  |  |  |                                                                                                                                                                          
                             [   DR  ][  SR1   ]  [     IMM5     ]                                                               


BR               |0 |0 |0 |0 |  |  |  |  |  |  |  |  |  |  |  |  |                                                                             
                             [c][o][n][z][p][     PCOffset7      ]                                     


JMP              |1 |1 |0 |0 |0 |0 |0 |  |  |  |0 |0 |0 |0 |0 |0 |         
                                      [ BaseR  ]                                              


LD               |0 |0 |1 |0 |  |  |  |  |  |  |  |  |  |  |  |  |
                             [   DR  ][        PCOffset9         ]   


LDR              |0 |1 |1 |0 |  |  |  |  |  |  |0 |0 |0 |  |  |  |
                             [   DR  ][ BaseR ][     Offset6     ]      


LEA              |1 |1 |1 |0 |  |  |  |  |  |  |0 |0 |0 |  |  |  |
                             [   DR  ][        PCOffset9         ]    


ST               |0 |0 |1 |0 |  |  |  |  |  |  |0 |0 |0 |  |  |  |
                             [   SR  ][        PCOffset9         ]    


STR              |0 |1 |1 |1 |  |  |  |  |  |  |0 |0 |0 |  |  |  |
                             [   SR  ][ BaseR ][     Offset6     ]      


SUB              |1 |1 |0 |1 |  |  |  |  |  |  |0 |0 |0 |  |  |  |
                             [   DR  ][  SR1   ]        [   SR2  ]                                                                  


SUB              |1 |1 |0 |1 |  |  |  |  |  |  |1 |0 |0 |  |  |  |
                             [   DR  ][  SR1   ]  [     IMM5     ]                                                                  


HALT             |1 |0 |0 |0 |0 |0 |0 |0 |0 |0 |0 |0 |0 |0 |0 |0 |