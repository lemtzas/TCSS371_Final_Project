Write a program that loads two numbers from a memory location and adds
them together, stores them in a third memory location.
At the end of this program you should be able to see the answer in the
destination register as well as the memory location. 

PC:
0	AND R1, R1, #0  ;initialize R1
1	AND R2, R2, R1  ;initialize R2
2	AND R3, R3, #0  ;initialize R3
3	AND R4, R4, #0  ;initialize R4
4	ADD R1, R1, #6  ;set R1 to 6
5	ADD R2, R2, #2  ;set R2 to 2
6	ADD R4, R4, #11 ;set R4 to 11
7	ST  R1, #12     ;set mem addr 20 to #6 (PC=8, +12=20)
8	STR R2, R4, #10 ;set mem addr 21 to #2 (R4=11, +10=21)
9	LD  R1, #10     ;load value from mem addr 20 into R1
10	LEA R4, #10     ;load #21 into R4
11	LDR R2, R4, #0  ;load value from mem addr 21 into R2
12	ADD R3, R1, R2  ;add R1 and R2 and place result in R3
13  ST  R3, #8      ;store value from R3 in mem addr 22
14  HALT            ;end the program

0	0101 0010 0110 0000		0x5260
1	0101 0100 1000 0001		0x5481
2	0101 0110 1110 0000		0x56E0
3	0101 1001 0010 0000		0x5920
4	0001 0010 0110 0110		0x1266
5	0001 0100 1010 0010		0x14A2
6	0011 0010 0000 1100		0x320C
7	0011 0010 0000 1011		0x320B
8	0010 0010 0000 1010		0x220A
9	1110 1000 0000 1010		0xE80A
10	1110 1000 0000 1001		0xE809
11	0110 0101 0000 0000		0x6500
12	0011 0110 0000 1000		0x3608
13	0011 0110 0000 0111		0x3607
14	1000 0000 0000 0000		0x8000


Subtract a positive value (as stored in memory) from a positive value
(also in memory) and put the result back in another memory location.
Branch to another location if the result was negative where you will
store the contents of the source register 1 to a specific location in
memory. Otherwise store the contents of source register 2 in that
location. From either of these jump (if necessary) to the HALT
instruction. 

PC:
0	AND R1, R1, #0  ;initialize R1
1	AND R2, R2, R1  ;initialize R2	
2	ADD R1, R1, #6  ;set R1 to 6
3	ADD R2, R2, #2  ;set R2 to 2	
4	ST  R1, #25     ;set mem addr 30 to #6 (PC=5, +25=30)
5	ST  R2, #25     ;set mem addr 31 to #2 (PC=6, +25=31)
6	LD  R1, #24     ;load value from mem addr 31 into R1
7	LD  R2, #22     ;load value from mem addr 30 into R2
8	SUB R3, R1, R2  ;subtract R2 from R1 and store in R3 (switch for other branch)
9	ST  R3, #22     ;set mem addr 32 to the value stored in R3
10  AND R3, R3, #0  ;initialize R3
11  LEA R3, #21     ;load #33 into R3
12	BRn #5          ;load #18 into the PC if condition negative
13	STR R2, R3, #0  ;set mem addr 33 to the value stored in R2
14	AND R4, R4, #0  ;initialize R4
15	ADD R4, R4, #10 ;set R4 to 10
16	ADD R4, R4, R4  ;double the value in R4
17	JMP R4          ;jump to 20 (load 20 into the PC)
18	STR R1, R3, #0  ;set mem addr 33 to the value stored in R2
19	HALT

0	0101 0010 0110 0000		0x5260
1	0101 0100 1000 0001		0x5481
2	0001 0010 0110 0110		0x1266
3	0001 0100 1010 0010		0x14A2
4	0011 0010 0001 1001		0x3219
5	0011 0100 0001 1001		0x3419
6	0010 0010 0001 1000		0x2218
7	0010 0100 0001 0110		0x2416
8	1101 0110 0100 0010		0xD642	or	1101 0110 1000 0001		0xD681
9	0011 0110 0001 0110		0x3616
10	0101 0110 1110 0000		0x56E0
11	1110 0110 0001 0101		0xE615
12	0000 0001 0000 0101		0x0105
13	0111 0100 1100 0000		0x74C0
14	0101 1001 0010 0000		0x5920
15	0001 1001 0010 0110		0x1926
16	0001 1001 0000 0100		0x1904
17	1100 0001 0000 0000		0xC100
18	0111 0010 1100 0000		0x72C0
19	1000 0000 0000 0000		0x8000



Add two positive numbers that will force overflow (say 0x7FFF + 0x0005)
and put the result in a memory location. Then branch on overflow to a
part of the program that stores the source register 1 to a specified
location and goto HALT. Otherwise store source register 2 to that
location then goto HALT. Try this same program but using a smaller
number such as 0x6FFF to make sure the correct branch is taken. 

PC:
0	LD      R1, #1      ;load into R1, the value in mem addr 2
1	BRconzp     #1      ;load 3 into the PC unconditionally
2	7FFF                ;value for R1, should never be run as an opcode (switch to 6FFF for other branch)
3	AND     R2, R2, #0  ;initialize R2
4	ADD     R2, R2, #5  ;set R2 to 5
5	LEA     R4, #6      ;load R4 with the address for memory location 12 (HALT)
6	LEA     R5, #13     ;set R5 to 20 (mem addr to store SR1 or SR2 depending on branch)
7	ADD     R3, R1, R2  ;add R1 and R2, this should cause an overflow condition
8	BRo     #2          ;set the PC to 11 on overflow branch
9	STR     R2, R5, #0  ;store the value in R2 to mem addr 20
10	JMP     R4          ;jump to HALT
11	STR     R1, R5, #0  ;store the value in R1 to mem addr 20
12	HALT

0	0010 0010 0000 0001		0x2201
1	0000 1111 1000 0001		0x0F81
2	0111 1111 1111 1111		0x7FFF	or	0110 1111 1111 1111		0x6FFF
3	0101 0100 1010 0000		0x54A0
4	0001 0100 1010 0101		0x14A5
5	1110 1000 0000 0110		0xE806
6	1110 1010 0000 1101		0xEA0D
7	0001 0110 0100 0010		0x1642
8	0000 0100 0000 0010		0x0402
9	0111 0101 0100 0000		0x7540
10	1100 0001 0000 0000		0xC100
11	0111 0011 0100 0000		0x7340
12	1000 0000 0000 0000		0x8000

Load a positive value into a register from memory and NOT it using a
different destination register. Then branch on negative to a part of
the program where you store the contents of the destination register
to a memory location. After storing the negative value (say at a
location labeled NEGVAL) do an absolute branch back to the position
in the program immediately after the first branch (it needs a label).
Do the exact opposite operation; NOT the original destination register
and store it back in the original load register (e.g. say R2 was the
original load register and your first NOT used R1 as destination, then
the second time you would NOT R1 and store it back in R2). Branch on
positive, this time, to a point in the program where you store a
positive value, say at POSVAL. Then halt the program. Modify the value
in memory so that it is negative and then since the branch is not taken
(shouldn't be!) store the original load register to the same memory
location. 

PC:
0	LD      R1, #1      ;load into R1, the value in mem addr 2
1	BRconzp     #1      ;load 3 into the PC unconditionally
2	000A                ;value for R1, should never be run as an opcode	(switch to 800A for other branch)
3	NOT     R2, R1
4	BRn     #5          ;set the PC to 10 on negative branch
5	NOT     R1, R2
6	BRp     #5          ;set the PC to 12 on positive branch
7	ST      R1, #-6     ;store the value in R1 at mem addr 2
8	BRconzp     #4      ;load 13 into the PC unconditionally
9
10	ST      R2, #9      ;store the value in R2 at mem addr 20 (NEGVAL)
11	BRconzp     #-7     ;load 5 into the PC unconditionally
12	ST      R1, #8      ;store the value in R1 at mem addr 21 (POSVAL)
13	HALT

0	0010 0010 0000 0001		2201
1	0000 1111 1000 0001		0F81
2	0000 0000 0000 1010		000A	or	1000 0000 0000 1010		800A
3	1001 0100 0111 1111		947F
4	0000 0010 0000 0101		0205
5	1001 0010 1011 1111		92BF
6	0000 0000 1000 0101		0085
7	0011 0011 1111 0111		33F7
8	0000 1111 1000 0100		0F84
9	0000 0000 0000 0000		0000	This line deliberately left empty to test empty branch.
10	0011 0100 0000 1001		3409
11	0000 1111 1111 1001		0FF9
12	0011 0010 0000 1000		3208
13	1000 0000 0000 0000		8000
